type Transaction @entity {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [Event!]! @derivedFrom(field: "transaction")
}

####################
#     Protocol     #
####################

type Account @entity {
  id: ID!
  # ------------------- state -----------------
  hat: Hat # todo: case 0 ?
  #balance: BigDecimal! # in rDai (rAmount)
  # ------------------- links -----------------
  loansOwned: [Loan!]! @derivedFrom(field: "owner")
  loansReceived: [Loan!]!
  hatMember: [HatMembership!]! @derivedFrom(field: "account")
  transfersFrom: [Transfer!]! @derivedFrom(field: "from")
  transfersTo: [Transfer!]! @derivedFrom(field: "to")
  interests: [InterestPaid!]! @derivedFrom(field: "account")
  events: [HatChanged!]! @derivedFrom(field: "account")
}

type Loan @entity {
  id: ID!
  # ---------------------------------- state ----------------------------------
  owner: Account!
  recipient: Account!
  amount: BigDecimal! # in rDai (accounts[owner].lRecipients[recipient])
  hat: Hat # todo: case 0 ?
  sInternal: BigDecimal!
  interestRedeemed: BigDecimal!
  # ---------------------------------- links ----------------------------------
  transfers: [LoanTransferred!]! @derivedFrom(field: "loan")
}

type Flow @entity {
  id: ID!
  # ---------------------------------- links ----------------------------------
  from: Account! #@derivedFrom(field: "hat")
  to: Account! #@derivedFrom(field: "hat")
  events: [FlowUpdated!]! @derivedFrom(field: "flow")
}

type HatMembership @entity {
  id: ID!
  # ---------------------------------- state ----------------------------------
  hat: Hat! # no case 0 here
  account: Account!
  portion: BigInt!
}

#############
#  Events   #
############

interface Event {
  id: ID!
  transaction: Transaction!
}

type FlowUpdated implements Event @entity {
  id: ID!
  transaction: Transaction!
  account: Account!
  flow: Flow!
}
